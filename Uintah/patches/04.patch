diff --git a/src/Core/Grid/Level.cc b/src/Core/Grid/Level.cc
index ec4504b7..ad29ee7c 100644
--- a/src/Core/Grid/Level.cc
+++ b/src/Core/Grid/Level.cc
@@ -416,9 +416,10 @@ Level::getTotalCellsInRegion(const TypeDescription::Type varType,
 
   Patch::VariableBasis basis = Patch::translateTypeToBasis(varType, false);
   
-  for( int i = 0; i < (int)m_real_patches.size(); i++ ) {
-    IntVector patchLow  =  m_real_patches[i]->getExtraLowIndex(  basis, boundaryLayer );
-    IntVector patchHigh =  m_real_patches[i]->getExtraHighIndex( basis, boundaryLayer );
+  // scjmc - using also virtual patches to take into account periodic boundaries on non cubic levels such as refined amr levels
+  for( size_t i = 0; i < m_virtual_and_real_patches.size(); ++i ) {
+    IntVector patchLow  =  m_virtual_and_real_patches[i]->getExtraLowIndex(  basis, boundaryLayer );
+    IntVector patchHigh =  m_virtual_and_real_patches[i]->getExtraHighIndex( basis, boundaryLayer );
 
     if( doesIntersect(lowIndex, highIndex, patchLow, patchHigh) ){
 
diff --git a/src/Core/Grid/Patch.cc b/src/Core/Grid/Patch.cc
index 49710588..b6969653 100644
--- a/src/Core/Grid/Patch.cc
+++ b/src/Core/Grid/Patch.cc
@@ -1437,6 +1437,10 @@ void Patch::computeVariableExtentsWithBoundaryCheck(Uintah::TypeDescription::Typ
     
     this->getLevel()->computeVariableExtents(basis, levelLow, levelHigh);
     
+    // scjmc: we need to add ghost cells to level extents as well in order to
+    // handle periodic boundaries on non cubic levels (such as amr fine levels)
+    levelLow  -= ghostLowOffset;
+    levelHigh += ghostHighOffset;
     
     //__________________________________
     //  Clamp the a valid extent
